/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef heartbeat_service_H
#define heartbeat_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "heartbeat_service_types.h"

namespace mmux { namespace directory {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class heartbeat_serviceIf {
 public:
  virtual ~heartbeat_serviceIf() {}
  virtual void ping(const heartbeat& hb) = 0;
};

class heartbeat_serviceIfFactory {
 public:
  typedef heartbeat_serviceIf Handler;

  virtual ~heartbeat_serviceIfFactory() {}

  virtual heartbeat_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(heartbeat_serviceIf* /* handler */) = 0;
};

class heartbeat_serviceIfSingletonFactory : virtual public heartbeat_serviceIfFactory {
 public:
  heartbeat_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf>& iface) : iface_(iface) {}
  virtual ~heartbeat_serviceIfSingletonFactory() {}

  virtual heartbeat_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(heartbeat_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf> iface_;
};

class heartbeat_serviceNull : virtual public heartbeat_serviceIf {
 public:
  virtual ~heartbeat_serviceNull() {}
  void ping(const heartbeat& /* hb */) {
    return;
  }
};

typedef struct _heartbeat_service_ping_args__isset {
  _heartbeat_service_ping_args__isset() : hb(false) {}
  bool hb :1;
} _heartbeat_service_ping_args__isset;

class heartbeat_service_ping_args {
 public:

  heartbeat_service_ping_args(const heartbeat_service_ping_args&);
  heartbeat_service_ping_args& operator=(const heartbeat_service_ping_args&);
  heartbeat_service_ping_args() {
  }

  virtual ~heartbeat_service_ping_args() throw();
  heartbeat hb;

  _heartbeat_service_ping_args__isset __isset;

  void __set_hb(const heartbeat& val);

  bool operator == (const heartbeat_service_ping_args & rhs) const
  {
    if (!(hb == rhs.hb))
      return false;
    return true;
  }
  bool operator != (const heartbeat_service_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const heartbeat_service_ping_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class heartbeat_service_ping_pargs {
 public:


  virtual ~heartbeat_service_ping_pargs() throw();
  const heartbeat* hb;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class heartbeat_service_ping_result {
 public:

  heartbeat_service_ping_result(const heartbeat_service_ping_result&);
  heartbeat_service_ping_result& operator=(const heartbeat_service_ping_result&);
  heartbeat_service_ping_result() {
  }

  virtual ~heartbeat_service_ping_result() throw();

  bool operator == (const heartbeat_service_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const heartbeat_service_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const heartbeat_service_ping_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class heartbeat_service_ping_presult {
 public:


  virtual ~heartbeat_service_ping_presult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class heartbeat_serviceClientT : virtual public heartbeat_serviceIf {
 public:
  heartbeat_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  heartbeat_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void ping(const heartbeat& hb);
  void send_ping(const heartbeat& hb);
  void recv_ping();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef heartbeat_serviceClientT< ::apache::thrift::protocol::TProtocol> heartbeat_serviceClient;

template <class Protocol_>
class heartbeat_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (heartbeat_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (heartbeat_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  heartbeat_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = ProcessFunctions(
      &heartbeat_serviceProcessorT::process_ping,
      &heartbeat_serviceProcessorT::process_ping);
  }

  virtual ~heartbeat_serviceProcessorT() {}
};

typedef heartbeat_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > heartbeat_serviceProcessor;

template <class Protocol_>
class heartbeat_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  heartbeat_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< heartbeat_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< heartbeat_serviceIfFactory > handlerFactory_;
};

typedef heartbeat_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > heartbeat_serviceProcessorFactory;

class heartbeat_serviceMultiface : virtual public heartbeat_serviceIf {
 public:
  heartbeat_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~heartbeat_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf> > ifaces_;
  heartbeat_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<heartbeat_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(const heartbeat& hb) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(hb);
    }
    ifaces_[i]->ping(hb);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class heartbeat_serviceConcurrentClientT : virtual public heartbeat_serviceIf {
 public:
  heartbeat_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  heartbeat_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void ping(const heartbeat& hb);
  int32_t send_ping(const heartbeat& hb);
  void recv_ping(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef heartbeat_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> heartbeat_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "heartbeat_service.tcc"
#include "heartbeat_service_types.tcc"

#endif
