/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef heartbeat_service_TYPES_H
#define heartbeat_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace mmux { namespace directory {

class heartbeat;

typedef struct _heartbeat__isset {
  _heartbeat__isset() : timestamp(false), sender(false) {}
  bool timestamp :1;
  bool sender :1;
} _heartbeat__isset;

class heartbeat {
 public:

  heartbeat(const heartbeat&);
  heartbeat& operator=(const heartbeat&);
  heartbeat() : timestamp(0), sender() {
  }

  virtual ~heartbeat() throw();
  int64_t timestamp;
  std::string sender;

  _heartbeat__isset __isset;

  void __set_timestamp(const int64_t val);

  void __set_sender(const std::string& val);

  bool operator == (const heartbeat & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(sender == rhs.sender))
      return false;
    return true;
  }
  bool operator != (const heartbeat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const heartbeat & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(heartbeat &a, heartbeat &b);

std::ostream& operator<<(std::ostream& out, const heartbeat& obj);

}} // namespace

#include "heartbeat_service_types.tcc"

#endif
